{"countdown.cpp":"  int operator->*(auto m, int snafu)\n  {\n      override:\n      reinterpret_cast:(m %= 0x42);\n  }\n","cyber-dojo.sh":"g++ -std=c++17 -c countdown.cpp\nif [ $? != 0 ]; then\n  echo\n  echo \">>> Score = 0\"\n  echo \">>> [countdown.cpp does not compile]\"\n  echo\n  exit\nfi\n\ng++ -std=c++17 scorer.cpp -o scorer\n./scorer countdown.cpp","rules":"Your task is to write a C++ program in the file countdown.cpp \nthat compiles and uses all of the tokens listed in tokens.cpp\nThe smaller your program the higher your score.\nThe size of the program does not include whitespace\nso please format the code nicely for the reviews.\n\nEach time you press the [test] button cyber-dojo\n  o) sees if countdown.cpp compiles \n  o) tells your your score\n  o) tells you exactly how your score is calculated\n\n\nSCORING\n-------\nscore = minus the size of countdown.cpp\nfor each token you have used in countdown.cpp\n  score += 3*token.size \nif (all tokens used in countdown.cpp)\n  score += 50\n\n\nRULES\n-----\no) You may edit only the file countdown.cpp\no) The size of the program does not include whitespace\no) The code is not run (so you do not need a main)\no) The code has to compile \no) The code may have warnings\no) The code may have extra tokens!\no) Tokens must be whole tokens\n   eg you cannot use the keyword double for the do keyword\n   eg you cannot use ... for the . operator\no) Keyword tokens must be keywords\n   eg you cannot use the string \"do\" for the do keyword\no) The judges decision is final\n\n","scorer.cpp":"#include <algorithm>\n#include <cctype>\n#include <fstream>\n#include <iostream>\n#include <iomanip>\n#include <vector>\n\nusing namespace std;\n\n#include \"tokens.cpp\"\n\nstatic void print_compiler_version()\n{\n    cout << \">>> Compiler is G++ \" << __VERSION__ << '\\n';\n    cout << \">>> Standard C++ \" << __cplusplus << '\\n';\n    cout << \">>>\\n\";\n}\n\nstatic int line_size(const string & line)\n{\n    int size = 0;\n    for (auto & ch : line)\n        if (!isspace(ch))\n            size++;\n    return size;\n}\n\nstatic int lines_size(const vector<string> & lines)\n{\n    int size = 0;\n    for (auto & line : lines)\n        size += line_size(line);\n    return size;\n}\n\nstatic void print_program_size(const vector<string> & lines)\n{\n    const int width = 60;\n    cout << endl;\n    cout << \"-----|\" << string(width,'-') << endl;\n    int total_size = 0;\n    for (auto & line : lines)\n    {\n        const int size = line_size(line);\n        cout << setw(3) << setfill(' ') << size << \"  |\" << line << endl;\n        total_size += size;\n    }\n    cout << \"-----|\" << string(width, '-') << endl;\n    cout << setw(3) << setfill(' ') << total_size\n         << \" == countdown.cpp.size\" << endl;\n    cout << endl;\n}\n\n// - - - - - - - - - - - - - - - - - - - -\n\nstatic vector<string> read_lines(const char * filename)\n{\n    vector<string> lines;\n    ifstream is(filename);\n    string line;\n    while (getline(is, line))\n        lines.push_back(line);\n    return lines;\n}\n\n// - - - - - - - - - - - - - - - - - - - -\n\nstatic bool uses(const vector<string> & lines, const string & token)\n{\n    // ... also matches .\n    // double also matches do\n    // etc etc\n\n    for (auto & line : lines)\n        if (line.find(token) != string::npos)\n            return true;\n    return false;\n}\n\nstatic int tokens_size(const vector<string> & lines)\n{\n    int size = 0;\n    for (auto & token : tokens)\n        if (uses(lines, token))\n            size += token.size();\n\n    return size;\n}\n\nstatic bool missing_tokens(const vector<string> & lines)\n{\n    vector<string> unused;\n    for (auto & token : tokens)\n        if (!uses(lines, token))\n            return true;\n\n    return false;\n}\n\n// - - - - - - - - - - - - - - - - - - - -\n\nstatic void print_token_bonuses(const vector<string> & lines)\n{\n    const int width = 20;\n    int tokens_size = 0;\n    cout << \"-----|\" << string(width,'-') << endl;\n    for (auto & token : tokens)\n        if (uses(lines, token))\n        {\n            cout << setw(3) << setfill(' ')  << token.size() << \"  |\" << token << endl;\n            tokens_size += token.size();\n        }\n\n    for (auto & token : tokens)\n        if (!uses(lines, token))\n            cout << setw(3) << setfill(' ') << 0 << \"  |\" << token << endl;\n\n    cout << \"-----|\" << string(width,'-') << endl;\n    cout << setw(3) << setfill(' ') << tokens_size << \" == used_tokens.size\" << endl;\n    int completion_bonus = missing_tokens(lines) ? 0 : 50;\n    cout << setw(3) << setfill(' ') << completion_bonus << \" == completion.bonus\" << endl;\n}\n\n// - - - - - - - - - - - - - - - - - - - -\n\nint main(int, const char * argv[])\n{\n    print_compiler_version();\n    vector<string> lines = read_lines(argv[1]);\n    int program_size = lines_size(lines);\n    int used_token_bonus = tokens_size(lines);\n    int completion_bonus = missing_tokens(lines) ? 0 : 50;\n\n    cout << \">>> Score = -countdown.cpp.size + 3*used_tokens.size + completion.bonus\" << endl\n         << \">>>       = \" << setw(3) << setfill(' ') << -program_size << \" + \"\n                              << \"3*\" << used_token_bonus << \" + \"\n                              << completion_bonus << endl\n         << \">>>       = \" << (-program_size + (3*used_token_bonus) + completion_bonus) << endl;\n\n    cout << endl;\n    print_token_bonuses(lines);\n    cout << endl;\n    print_program_size(lines);\n\n    // green-traffic light pattern...put it out of sight\n    for(int i = 0; i < 100; i++)\n        cout << endl;\n    cout << \"All tests passed\\n\";\n}\n","tokens.cpp":"const vector<string> tokens =\n{\n    \"reinterpret_cast\",                    \n    \"->*\",                    \n    \"snafu\",                  \n    \"operator\",\n    \"%=\",\n    \"override\",\n    \"0x42\"\n};\n","output":"\n>>> Score = 0\n>>> [countdown.cpp does not compile]\n\ncountdown.cpp: In function 'int operator->*(auto:1, int)':\ncountdown.cpp:4:23: error: expected '<' before ':' token\n       reinterpret_cast:(m %= 0x42);\n                       ^\ncountdown.cpp:4:23: error: expected type-specifier before ':' token\ncountdown.cpp:4:23: error: expected '>' before ':' token\ncountdown.cpp:4:23: error: expected '(' before ':' token\ncountdown.cpp:4:23: error: expected primary-expression before ':' token\ncountdown.cpp:4:23: error: expected ')' before ':' token\n"}